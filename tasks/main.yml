---
- include_role:
    name: andrewrothstein.unarchive-deps
- include_role:
    name: andrewrothstein.gcc-toolbox
- name: resolve platform specific vars
  include_vars: '{{ item }}'
  with_first_found:
    - files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml'
        - '{{ ansible_distribution }}.yml'
        - '{{ ansible_os_family }}.yml'
      skip: true
      paths:
        - '{{ role_path }}/vars'

- name: install dep pkgs...
  become: true
  become_user: root
  with_items: '{{ redis_dep_pkgs|default([]) }}'
  package:
    name: '{{ item }}'
    state: present

- name: check for install at {{ redis_install_exe }}
  become: true
  stat:
    path: '{{ redis_install_exe }}'
  changed_when: false
  register: redis_binary
- when: not redis_binary.stat.exists
  block:
    - name: downloading {{ redis_tgz_url }}
      become: true
      become_user: root
      get_url:
        url: '{{ redis_tgz_url }}'
        checksum: '{{ redis_checksum }}'
        dest: '{{ redis_tmp_tgz }}'
        mode: 0644

    - name: unarchive {{ redis_tmp_tgz }}
      become: true
      become_user: root
      unarchive:
        remote_src: true
        src: '{{ redis_tmp_tgz }}'
        dest: '{{ redis_parent_src_dir }}'
        creates: '{{ redis_src_dir }}'

    - name: make in {{ redis_src_dir }}
      become: true
      become_user: root
      command: make
      args:
        chdir: '{{ redis_src_dir }}'
        creates: '{{ redis_src_dir }}/src/redis-server'

    - name: make install in {{ redis_src_dir }}
      become: true
      become_user: root
      command: make install
      args:
        chdir: '{{ redis_src_dir }}'
        creates: '{{ redis_install_exe }}'
  always:
    - name: cleanup
      become: true
      become_user: root
      with_items:
        - '{{ redis_src_dir }}'
        - '{{ redis_tmp_tgz }}'
      file:
        path: '{{ item }}'
        state: absent
